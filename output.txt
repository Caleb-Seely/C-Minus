Var gromit of type int [line: 6]
Sibling: 0 Var _ of type int [line: 7]
Sibling: 1 Var dog__cat of type int [line: 7]
Sibling: 2 Var _nouveau of type int [line: 7]
Sibling: 3 Var _1024 of type int [line: 7]
Sibling: 4 Func wallace returns type void [line 10]
!   child: 0 Param wrong of type int [line: 10]
!   Sibling: 0 Param trousers of type int [line: 10]
!   child: 1 Compound [line: 11]
!   !   child: 0 Var close of type bool [line: 12]
!   !   !   child: 0 Const true [line: 12]
!   !   Sibling: 0 Var shave of type bool [line: 12]
!   !   !   child: 0 Const false [line: 12]
!   !   child: 1 Const 1729 [line: 14]
!   !   Sibling: 0 Id: close [line: 15]
!   !   Sibling: 1 Op: + [line: 16]
!   !   !   child: 0 Op: * [line: 16]
!   !   !   !   child: 0 Const 11 [line: 16]
!   !   !   !   child: 1 Const 22 [line: 16]
!   !   !   child: 1 Op: * [line: 16]
!   !   !   !   child: 0 Const 33 [line: 16]
!   !   !   !   child: 1 Const 44 [line: 16]
!   !   Sibling: 2 Assign: = [line: 17]
!   !   !   child: 0 Id: close [line: 17]
!   !   !   child: 1 Id: shave [line: 17]
!   !   Sibling: 3 Assign: = [line: 18]
!   !   !   child: 0 Id: wrong [line: 18]
!   !   !   child: 1 Op: % [line: 18]
!   !   !   !   child: 0 Id: trousers [line: 18]
!   !   !   !   child: 1 Op: / [line: 18]
!   !   !   !   !   child: 0 Const 666 [line: 18]
!   !   !   !   !   child: 1 Id: wrong [line: 18]
!   !   Sibling: 4 Assign: = [line: 19]
!   !   !   child: 0 Id: gromit [line: 19]
!   !   !   child: 1 Op: + [line: 19]
!   !   !   !   child: 0 Op: - [line: 19]
!   !   !   !   !   child: 0 Op: * [line: 19]
!   !   !   !   !   !   child: 0 Id: wrong [line: 19]
!   !   !   !   !   !   child: 1 Id: trousers [line: 19]
!   !   !   !   !   child: 1 Id: gromit [line: 19]
!   !   !   !   child: 1 Op: - [line: 19]
!   !   !   !   !   child: 0 Const 42 [line: 19]
!   !   Sibling: 5 Assign: += [line: 20]
!   !   !   child: 0 Id: gromit [line: 20]
!   !   !   child: 1 Const 27182818 [line: 20]
!   !   Sibling: 6 Assign: -= [line: 21]
!   !   !   child: 0 Id: gromit [line: 21]
!   !   !   child: 1 Op: - [line: 21]
!   !   !   !   child: 0 Const 31415927 [line: 21]
!   !   Sibling: 7 Assign: /= [line: 22]
!   !   !   child: 0 Id: gromit [line: 22]
!   !   !   child: 1 Assign: *= [line: 22]
!   !   !   !   child: 0 Id: wrong [line: 22]
!   !   !   !   child: 1 Const 42 [line: 22]
!   !   Sibling: 8 Assign: = [line: 23]
!   !   !   child: 0 Id: close [line: 23]
!   !   !   child: 1 Op: and [line: 23]
!   !   !   !   child: 0 Op: < [line: 23]
!   !   !   !   !   child: 0 Id: wrong [line: 23]
!   !   !   !   !   child: 1 Id: trousers [line: 23]
!   !   !   !   child: 1 Op: <= [line: 23]
!   !   !   !   !   child: 0 Id: trousers [line: 23]
!   !   !   !   !   child: 1 Id: gromit [line: 23]
!   !   Sibling: 9 Assign: = [line: 24]
!   !   !   child: 0 Id: shave [line: 24]
!   !   !   child: 1 Op: and [line: 24]
!   !   !   !   child: 0 Op: > [line: 24]
!   !   !   !   !   child: 0 Id: wrong [line: 24]
!   !   !   !   !   child: 1 Id: trousers [line: 24]
!   !   !   !   child: 1 Op: >= [line: 24]
!   !   !   !   !   child: 0 Id: trousers [line: 24]
!   !   !   !   !   child: 1 Id: gromit [line: 24]
!   !   Sibling: 10 Compound [line: 25]
!   !   !   child: 0 Var a of type int [line: 26]
!   !   !   Sibling: 0 Var grand of type int [line: 26]
!   !   !   !   child: 0 Op: / [line: 26]
!   !   !   !   !   child: 0 Const 1 [line: 26]
!   !   !   !   !   child: 1 Const 2 [line: 26]
!   !   !   Sibling: 1 Var day of type int [line: 26]
!   !   !   !   child: 0 Op: * [line: 26]
!   !   !   !   !   child: 0 Const 3 [line: 26]
!   !   !   !   !   child: 1 Const 4 [line: 26]
!   !   !   Sibling: 2 Var out of type int [line: 26]
!   !   !   !   child: 0 Op: - [line: 26]
!   !   !   !   !   child: 0 Const 9 [line: 26]
!   !   !   child: 1 Assign: = [line: 27]
!   !   !   !   child: 0 Id: a [line: 27]
!   !   !   !   child: 1 Assign: += [line: 27]
!   !   !   !   !   child: 0 Id: grand [line: 27]
!   !   !   !   !   child: 1 Assign: -= [line: 27]
!   !   !   !   !   !   child: 0 Id: day [line: 27]
!   !   !   !   !   !   child: 1 Id: out [line: 27]
!   !   Sibling: 11 Assign: = [line: 29]
!   !   !   child: 0 Id: close [line: 29]
!   !   !   child: 1 Op: and [line: 29]
!   !   !   !   child: 0 Op: < [line: 29]
!   !   !   !   !   child: 0 Op: + [line: 29]
!   !   !   !   !   !   child: 0 Op: * [line: 29]
!   !   !   !   !   !   !   child: 0 Op: - [line: 29]
!   !   !   !   !   !   !   !   child: 0 Const 1 [line: 29]
!   !   !   !   !   !   !   child: 1 Const 2 [line: 29]
!   !   !   !   !   !   child: 1 Const 3 [line: 29]
!   !   !   !   !   child: 1 Op: * [line: 29]
!   !   !   !   !   !   child: 0 Const 4 [line: 29]
!   !   !   !   !   !   child: 1 Const 5 [line: 29]
!   !   !   !   child: 1 Op: > [line: 29]
!   !   !   !   !   child: 0 Op: + [line: 29]
!   !   !   !   !   !   child: 0 Const 6 [line: 29]
!   !   !   !   !   !   child: 1 Const 7 [line: 29]
!   !   !   !   !   child: 1 Op: - [line: 29]
!   !   !   !   !   !   child: 0 Const 3 [line: 29]
!   !   Sibling: 12 Assign: = [line: 30]
!   !   !   child: 0 Id: shave [line: 30]
!   !   !   child: 1 Op: or [line: 30]
!   !   !   !   child: 0 Const true [line: 30]
!   !   !   !   child: 1 Op: and [line: 30]
!   !   !   !   !   child: 0 Op: < [line: 30]
!   !   !   !   !   !   child: 0 Op: - [line: 30]
!   !   !   !   !   !   !   child: 0 Op: * [line: 30]
!   !   !   !   !   !   !   !   child: 0 Const 1 [line: 30]
!   !   !   !   !   !   !   !   child: 1 Op: + [line: 30]
!   !   !   !   !   !   !   !   !   child: 0 Const 2 [line: 30]
!   !   !   !   !   !   !   !   !   child: 1 Const 3 [line: 30]
!   !   !   !   !   !   child: 1 Op: * [line: 30]
!   !   !   !   !   !   !   child: 0 Const 4 [line: 30]
!   !   !   !   !   !   !   child: 1 Const 5 [line: 30]
!   !   !   !   !   child: 1 Op: > [line: 30]
!   !   !   !   !   !   child: 0 Op: + [line: 30]
!   !   !   !   !   !   !   child: 0 Const 6 [line: 30]
!   !   !   !   !   !   !   child: 1 Const 7 [line: 30]
!   !   !   !   !   !   child: 1 Op: - [line: 30]
!   !   !   !   !   !   !   child: 0 Const 3 [line: 30]
!   !   Sibling: 13 If [line: 31]
!   !   !   child: 0 Op: != [line: 31]
!   !   !   !   child: 0 Id: shave [line: 31]
!   !   !   !   child: 1 Id: close [line: 31]
!   !   !   child: 1 Assign: = [line: 31]
!   !   !   !   child: 0 Id: shave [line: 31]
!   !   !   !   child: 1 Op: not [line: 31]
!   !   !   !   !   child: 0 Id: close [line: 31]
!   !   Sibling: 14 If [line: 32]
!   !   !   child: 0 Op: not [line: 32]
!   !   !   !   child: 0 Op: or [line: 32]
!   !   !   !   !   child: 0 Op: == [line: 32]
!   !   !   !   !   !   child: 0 Id: shave [line: 32]
!   !   !   !   !   !   child: 1 Id: close [line: 32]
!   !   !   !   !   child: 1 Op: not [line: 32]
!   !   !   !   !   !   child: 0 Id: close [line: 32]
!   !   !   child: 1 Assign: = [line: 32]
!   !   !   !   child: 0 Id: shave [line: 32]
!   !   !   !   child: 1 Const true [line: 32]
!   !   !   child: 2 Assign: = [line: 33]
!   !   !   !   child: 0 Id: close [line: 33]
!   !   !   !   child: 1 Const false [line: 33]
!   !   Sibling: 15 Assign: = [line: 34]
!   !   !   child: 0 Id: penguin [line: 34]
!   !   !   child: 1 Op: - [line: 34]
!   !   !   !   child: 0 Op: - [line: 34]
!   !   !   !   !   child: 0 Op: - [line: 34]
!   !   !   !   !   !   child: 0 Op: - [line: 34]
!   !   !   !   !   !   !   child: 0 Const 8 [line: 34]
!   !   !   !   !   child: 1 Op: - [line: 34]
!   !   !   !   !   !   child: 0 Assign: -- [line: 34]
!   !   !   !   !   !   !   child: 0 Id: close [line: 34]
!   !   Sibling: 16 While [line: 36]
!   !   !   child: 0 Id: shave [line: 36]
!   !   !   child: 1 Compound [line: 36]
!   !   !   !   child: 0 Var were of type int [line: 37]
!   !   !   !   Sibling: 0 Var rabbit of type int [line: 37]
!   !   !   !   Sibling: 1 Var sheep is array of type int [line: 38]
!   !   !   !   child: 1 Assign: = [line: 40]
!   !   !   !   !   child: 0 Op: [ [line: 40]
!   !   !   !   !   !   child: 0 Id: sheep [line: 40]
!   !   !   !   !   !   child: 1 Const 2 [line: 40]
!   !   !   !   !   child: 1 Const 1618 [line: 40]
!   !   !   !   Sibling: 0 If [line: 41]
!   !   !   !   !   child: 0 Op: < [line: 41]
!   !   !   !   !   !   child: 0 Op: [ [line: 41]
!   !   !   !   !   !   !   child: 0 Id: sheep [line: 41]
!   !   !   !   !   !   !   child: 1 Const 2 [line: 41]
!   !   !   !   !   !   child: 1 Const 496 [line: 41]
!   !   !   !   !   child: 1 Break [line: 41]
!   !   !   !   Sibling: 1 Call: wallace [line: 42]
!   !   !   !   !   child: 0 Assign: -- [line: 42]
!   !   !   !   !   !   child: 0 Id: gromit [line: 42]
!   !   !   !   !   Sibling: 0 Op: - [line: 42]
!   !   !   !   !   !   child: 0 Id: were [line: 42]
!   !   !   !   !   !   child: 1 Id: rabbit [line: 42]
!   !   !   !   Sibling: 2 Compound [line: 43]
!   !   !   !   !   child: 0 Var the of type int [line: 44]
!   !   !   !   !   Sibling: 0 Var wrong of type int [line: 44]
!   !   !   !   !   Sibling: 1 Var trousers of type int [line: 44]
!   !   !   !   !   child: 1 Assign: = [line: 46]
!   !   !   !   !   !   child: 0 Id: the [line: 46]
!   !   !   !   !   !   child: 1 Assign: += [line: 46]
!   !   !   !   !   !   !   child: 0 Id: wrong [line: 46]
!   !   !   !   !   !   !   child: 1 Assign: ++ [line: 46]
!   !   !   !   !   !   !   !   child: 0 Id: trousers [line: 46]
!   !   !   !   !   Sibling: 0 If [line: 47]
!   !   !   !   !   !   child: 0 Op: == [line: 47]
!   !   !   !   !   !   !   child: 0 Id: were [line: 47]
!   !   !   !   !   !   !   child: 1 Id: rabbit [line: 47]
!   !   !   !   !   !   child: 1 Assign: = [line: 47]
!   !   !   !   !   !   !   child: 0 Id: were [line: 47]
!   !   !   !   !   !   !   child: 1 Assign: -- [line: 47]
!   !   !   !   !   !   !   !   child: 0 Id: wrong [line: 47]
!   !   Sibling: 17 Return [line: 50]
Sibling: 5 Func penguin returns type bool [line 54]
!   child: 0 Param Feathers of type char [line: 54]
!   Sibling: 0 Param McGraw is array of type char [line: 54]
!   Sibling: 1 Param moon of type bool [line: 54]
!   Sibling: 2 Param cheese of type bool [line: 54]
!   Sibling: 3 Param launch of type int [line: 54]
!   child: 1 Compound [line: 55]
!   !   child: 0 Var tottington of type char [line: 56]
!   !   !   child: 0 Const 'x' [line: 56]
!   !   Sibling: 0 Var Wensleydale is array of type char [line: 57]
!   !   Sibling: 1 Var c of type char [line: 58]
!   !   Sibling: 2 Var i of type int [line: 59]
!   !   child: 1 Assign: = [line: 61]
!   !   !   child: 0 Id: tottington [line: 61]
!   !   !   child: 1 Id: Feathers [line: 61]
!   !   Sibling: 0 Assign: = [line: 62]
!   !   !   child: 0 Id: McGraw [line: 62]
!   !   !   child: 1 Id: Feathers [line: 62]
!   !   Sibling: 1 Assign: = [line: 63]
!   !   !   child: 0 Id: Wensleydale [line: 63]
!   !   !   child: 1 Id: McGraw [line: 63]
!   !   Sibling: 2 Assign: = [line: 64]
!   !   !   child: 0 Op: [ [line: 64]
!   !   !   !   child: 0 Id: Wensleydale [line: 64]
!   !   !   !   child: 1 Op: * [line: 64]
!   !   !   !   !   child: 0 Id: McGraw [line: 64]
!   !   !   child: 1 Const 'Q' [line: 64]
!   !   Sibling: 3 Assign: = [line: 65]
!   !   !   child: 0 Op: [ [line: 65]
!   !   !   !   child: 0 Id: McGraw [line: 65]
!   !   !   !   child: 1 Const 3 [line: 65]
!   !   !   child: 1 Const 'A' [line: 65]
Sibling: 6 Func Wendolene returns type int [line 68]
!   child: 0 Param wool of type int [line: 68]
!   Sibling: 0 Param shaun of type bool [line: 68]
!   Sibling: 1 Param yarn is array of type int [line: 68]
!   Sibling: 2 Param preston is array of type bool [line: 68]
!   child: 1 Compound [line: 69]
!   !   child: 0 Var void of type int [line: 70]
!   !   child: 1 Return [line: 71]
!   !   !   child: 0 Op: + [line: 71]
!   !   !   !   child: 0 Op: + [line: 71]
!   !   !   !   !   child: 0 Op: + [line: 71]
!   !   !   !   !   !   child: 0 Op: + [line: 71]
!   !   !   !   !   !   !   child: 0 Id: wool [line: 71]
!   !   !   !   !   !   !   child: 1 Op: [ [line: 71]
!   !   !   !   !   !   !   !   child: 0 Id: yarn [line: 71]
!   !   !   !   !   !   !   !   child: 1 Const 0 [line: 71]
!   !   !   !   !   !   child: 1 Op: * [line: 71]
!   !   !   !   !   !   !   child: 0 Id: yarn [line: 71]
!   !   !   !   !   child: 1 Op: [ [line: 71]
!   !   !   !   !   !   child: 0 Id: yarn [line: 71]
!   !   !   !   !   !   child: 1 Op: * [line: 71]
!   !   !   !   !   !   !   child: 0 Const 7 [line: 71]
!   !   !   !   !   !   !   child: 1 Id: wool [line: 71]
!   !   !   !   child: 1 Op: [ [line: 71]
!   !   !   !   !   child: 0 Id: yarn [line: 71]
!   !   !   !   !   child: 1 Op: - [line: 71]
!   !   !   !   !   !   child: 0 Op: [ [line: 71]
!   !   !   !   !   !   !   child: 0 Id: preston [line: 71]
!   !   !   !   !   !   !   child: 1 Op: + [line: 71]
!   !   !   !   !   !   !   !   child: 0 Const 3 [line: 71]
!   !   !   !   !   !   !   !   child: 1 Op: * [line: 71]
!   !   !   !   !   !   !   !   !   child: 0 Id: wool [line: 71]
!   !   !   !   !   !   !   !   !   child: 1 Const 2 [line: 71]
!   !   !   !   !   !   child: 1 Const 4 [line: 71]
Sibling: 7 Func ramsBottom returns type bool [line 75]
!   child: 1 Compound [line: 76]
!   !   child: 0 Var chicken is array of type int [line: 77]
!   !   Sibling: 0 Var run is array of type bool [line: 78]
!   !   Sibling: 1 Var wallace is array of type int [line: 79]
!   !   Sibling: 2 Var gromit is array of type int [line: 79]
!   !   child: 1 Op: * [line: 81]
!   !   !   child: 0 Const 42 [line: 81]
!   !   !   child: 1 Call: Wendolene [line: 81]
!   !   !   !   child: 0 Op: + [line: 81]
!   !   !   !   !   child: 0 Op: + [line: 81]
!   !   !   !   !   !   child: 0 Const 1 [line: 81]
!   !   !   !   !   !   child: 1 Const 2 [line: 81]
!   !   !   !   !   child: 1 Const 3 [line: 81]
!   !   !   !   Sibling: 0 Op: or [line: 81]
!   !   !   !   !   child: 0 Op: not [line: 81]
!   !   !   !   !   !   child: 0 Const true [line: 81]
!   !   !   !   !   child: 1 Op: and [line: 81]
!   !   !   !   !   !   child: 0 Const true [line: 81]
!   !   !   !   !   !   child: 1 Const false [line: 81]
!   !   !   !   Sibling: 1 Id: chicken [line: 81]
!   !   !   !   Sibling: 2 Id: run [line: 81]
!   !   Sibling: 0 Op: [ [line: 82]
!   !   !   child: 0 Id: run [line: 82]
!   !   !   child: 1 Op: - [line: 82]
!   !   !   !   child: 0 Op: * [line: 82]
!   !   !   !   !   child: 0 Id: run [line: 82]
!   !   !   !   child: 1 Const 1 [line: 82]
!   !   Sibling: 1 Return [line: 84]
!   !   !   child: 0 Op: not [line: 84]
!   !   !   !   child: 0 Op: >= [line: 84]
!   !   !   !   !   child: 0 Op: [ [line: 84]
!   !   !   !   !   !   child: 0 Id: wallace [line: 84]
!   !   !   !   !   !   child: 1 Const 1 [line: 84]
!   !   !   !   !   child: 1 Op: * [line: 84]
!   !   !   !   !   !   child: 0 Op: - [line: 84]
!   !   !   !   !   !   !   child: 0 Op: [ [line: 84]
!   !   !   !   !   !   !   !   child: 0 Id: gromit [line: 84]
!   !   !   !   !   !   !   !   child: 1 Const 2 [line: 84]
!   !   !   !   !   !   child: 1 Const 3 [line: 84]
Sibling: 8 Func cheese returns type int [line 87]
!   child: 0 Param x of type int [line: 87]
!   Sibling: 0 Param y of type int [line: 87]
!   child: 1 While [line: 87]
!   !   child: 0 Op: > [line: 87]
!   !   !   child: 0 Id: x [line: 87]
!   !   !   child: 1 Const 0 [line: 87]
!   !   child: 1 If [line: 87]
!   !   !   child: 0 Op: > [line: 87]
!   !   !   !   child: 0 Id: y [line: 87]
!   !   !   !   child: 1 Const 3 [line: 87]
!   !   !   child: 1 Assign: -- [line: 87]
!   !   !   !   child: 0 Id: x [line: 87]
!   !   !   child: 2 Return [line: 87]
!   !   !   !   child: 0 Op: % [line: 87]
!   !   !   !   !   child: 0 Op: * [line: 87]
!   !   !   !   !   !   child: 0 Id: x [line: 87]
!   !   !   !   !   !   child: 1 Id: x [line: 87]
!   !   !   !   !   child: 1 Id: y [line: 87]
Sibling: 9 Func Wensleydale returns type int [line 89]
!   child: 0 Param x of type int [line: 89]
!   Sibling: 0 Param y of type int [line: 89]
!   child: 1 Return [line: 89]
!   !   child: 0 Call: cheese [line: 89]
!   !   !   child: 0 Id: x [line: 89]
!   !   !   Sibling: 0 Id: gromit [line: 89]
Sibling: 10 Func LadyCampanula returns type int [line 91]
!   child: 0 Param c of type char [line: 91]
!   Sibling: 0 Param s is array of type char [line: 91]
!   child: 1 Loop [line: 91]
!   !   child: 0 Id: i [line: 91]
!   !   child: 1 Range [line: 91]
!   !   !   child: 0 Op: - [line: 91]
!   !   !   !   child: 0 Op: * [line: 91]
!   !   !   !   !   child: 0 Id: s [line: 91]
!   !   !   !   child: 1 Const 1 [line: 91]
!   !   !   child: 1 Const 0 [line: 91]
!   !   !   child: 2 Op: - [line: 91]
!   !   !   !   child: 0 Const 1 [line: 91]
!   !   child: 2 If [line: 91]
!   !   !   child: 0 Op: == [line: 91]
!   !   !   !   child: 0 Op: [ [line: 91]
!   !   !   !   !   child: 0 Id: s [line: 91]
!   !   !   !   !   child: 1 Id: i [line: 91]
!   !   !   !   child: 1 Id: c [line: 91]
!   !   !   child: 1 Return [line: 91]
!   !   !   !   child: 0 Id: i [line: 91]
Sibling: 11 Func MrsTweedy returns type char [line 93]
!   child: 0 Param c of type char [line: 93]
!   Sibling: 0 Param s is array of type char [line: 93]
!   child: 1 Compound [line: 93]
!   !   child: 1 Loop [line: 95]
!   !   !   child: 0 Id: ginger [line: 95]
!   !   !   child: 1 Range [line: 95]
!   !   !   !   child: 0 Const 0 [line: 95]
!   !   !   !   child: 1 Const 10 [line: 95]
!   !   !   child: 2 Assign: = [line: 95]
!   !   !   !   child: 0 Op: [ [line: 95]
!   !   !   !   !   child: 0 Id: s [line: 95]
!   !   !   !   !   child: 1 Id: ginger [line: 95]
!   !   !   !   child: 1 Id: c [line: 95]
!   !   Sibling: 0 LoopForever [line: 96]
!   !   !   child: 0 Break [line: 96]
!   !   Sibling: 1 LoopForever [line: 97]
!   !   !   child: 0 If [line: 97]
!   !   !   !   child: 0 Op: == [line: 97]
!   !   !   !   !   child: 0 Op: [ [line: 97]
!   !   !   !   !   !   child: 0 Id: s [line: 97]
!   !   !   !   !   !   child: 1 Const 0 [line: 97]
!   !   !   !   !   child: 1 Op: [ [line: 97]
!   !   !   !   !   !   child: 0 Id: s [line: 97]
!   !   !   !   !   !   child: 1 Const 1 [line: 97]
!   !   !   !   child: 1 Break [line: 97]
!   !   Sibling: 2 While [line: 98]
!   !   !   child: 0 Const true [line: 98]
!   !   !   child: 1 Break [line: 98]
!   !   Sibling: 3 Return [line: 100]
!   !   !   child: 0 Const 'x' [line: 100]
Sibling: 12 Func TheWereRabbit returns type char [line 103]
!   child: 0 Param x of type int [line: 103]
!   child: 1 Compound [line: 104]
!   !   child: 1 If [line: 105]
!   !   !   child: 0 Op: == [line: 105]
!   !   !   !   child: 0 Id: x [line: 105]
!   !   !   !   child: 1 Const 0 [line: 105]
!   !   !   child: 1 Return [line: 105]
!   !   !   !   child: 0 Const '@' [line: 105]
!   !   !   child: 2 Elsif [line: 106]
!   !   !   !   child: 0 Op: == [line: 106]
!   !   !   !   !   child: 0 Id: x [line: 106]
!   !   !   !   !   child: 1 Const 1 [line: 106]
!   !   !   !   child: 1 Return [line: 106]
!   !   !   !   !   child: 0 Const 'a' [line: 106]
!   !   !   !   child: 2 Elsif [line: 107]
!   !   !   !   !   child: 0 Op: == [line: 107]
!   !   !   !   !   !   child: 0 Id: x [line: 107]
!   !   !   !   !   !   child: 1 Const 2 [line: 107]
!   !   !   !   !   child: 1 Return [line: 107]
!   !   !   !   !   !   child: 0 Const 'b' [line: 107]
!   !   !   !   !   child: 2 Elsif [line: 108]
!   !   !   !   !   !   child: 0 Op: == [line: 108]
!   !   !   !   !   !   !   child: 0 Id: x [line: 108]
!   !   !   !   !   !   !   child: 1 Const 3 [line: 108]
!   !   !   !   !   !   child: 1 Return [line: 108]
!   !   !   !   !   !   !   child: 0 Const 'c' [line: 108]
!   !   !   !   !   !   child: 2 Elsif [line: 109]
!   !   !   !   !   !   !   child: 0 Op: == [line: 109]
!   !   !   !   !   !   !   !   child: 0 Id: x [line: 109]
!   !   !   !   !   !   !   !   child: 1 Const 4 [line: 109]
!   !   !   !   !   !   !   child: 1 Return [line: 109]
!   !   !   !   !   !   !   !   child: 0 Const 'd' [line: 109]
!   !   !   !   !   !   !   child: 2 Return [line: 110]
!   !   !   !   !   !   !   !   child: 0 Const ' ' [line: 110]
Sibling: 13 Func main returns type int [line 113]
!   child: 1 Compound [line: 114]
!   !   child: 0 Var wool of type int [line: 115]
!   !   Sibling: 0 Var yarn is array of type int [line: 115]
!   !   Sibling: 1 Var shaun of type bool [line: 116]
!   !   Sibling: 2 Var preston is array of type bool [line: 116]
!   !   Sibling: 3 Var rocky is array of type char [line: 117]
!   !   child: 1 Call: wallace [line: 119]
!   !   !   child: 0 Call: cheese [line: 119]
!   !   !   !   child: 0 Const 62 [line: 119]
!   !   !   !   Sibling: 0 Op: - [line: 119]
!   !   !   !   !   child: 0 Const 311 [line: 119]
!   !   !   Sibling: 0 Id: gromit [line: 119]
!   !   Sibling: 0 Assign: = [line: 120]
!   !   !   child: 0 Id: rocky [line: 120]
!   !   !   child: 1 Const "molybdenum" [line: 120]
!   !   Sibling: 1 Call: MrsTweedy [line: 122]
!   !   !   child: 0 Const 'Z' [line: 122]
!   !   !   Sibling: 0 Id: rocky [line: 122]
!   !   Sibling: 2 Op: + [line: 124]
!   !   !   child: 0 Op: [ [line: 124]
!   !   !   !   child: 0 Id: yarn [line: 124]
!   !   !   !   child: 1 Op: ? [line: 124]
!   !   !   !   !   child: 0 Const 100 [line: 124]
!   !   !   child: 1 Op: [ [line: 124]
!   !   !   !   child: 0 Id: yarn [line: 124]
!   !   !   !   child: 1 Op: ? [line: 124]
!   !   !   !   !   child: 0 Op: * [line: 124]
!   !   !   !   !   !   child: 0 Id: yarn [line: 124]
!   !   Sibling: 3 Return [line: 126]
!   !   !   child: 0 Call: Wendolene [line: 126]
!   !   !   !   child: 0 Op: * [line: 126]
!   !   !   !   !   child: 0 Op: * [line: 126]
!   !   !   !   !   !   child: 0 Id: preston [line: 126]
!   !   !   !   !   child: 1 Op: * [line: 126]
!   !   !   !   !   !   child: 0 Id: yarn [line: 126]
!   !   !   !   Sibling: 0 Id: shaun [line: 126]
!   !   !   !   Sibling: 1 Id: yarn [line: 126]
!   !   !   !   Sibling: 2 Id: preston [line: 126]
Sibling: 14 Var aBigLongVariableName6 of type bool [line: 129]
Sibling: 15 Var odd of type int [line: 130]
Sibling: 16 Var separation of type int [line: 130]
Sibling: 17 Var of of type int [line: 130]
Sibling: 18 Var stuff of type int [line: 131]
Sibling: 19 Var ant is array of type char [line: 133]
!   child: 0 Const "unwrinkled" [line: 133]
Sibling: 20 Var bat of type char [line: 134]
!   child: 0 Const ''' [line: 134]
Sibling: 21 Var cat of type char [line: 134]
!   child: 0 Const 't' [line: 134]
Sibling: 22 Var dog of type char [line: 134]
!   child: 0 Const '
' [line: 134]
Sibling: 23 Var hog of type char [line: 135]
!   child: 0 Const ' ' [line: 135]
